name: dev-cicd

on:
  push:
    branches: ["main", "feat/toy-38-cicd"] ## 테스트를 위해 feat브랜치에 추가.
  pull_request:
    branches: ["main", "feat/toy-38-cicd"]

permissions: write-all

env:
  DOCKER_IMAGE: sh80165/dev-contribhub
  # DOCKER_IMAGE_VERSION: ${{ GITHUB_SHA }}


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        env: # Or as an environment variable
          GIT_AUTH_TOKEN: ${{ secrets.GIT_AUTH_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: ./gradlew build --stacktrace

      # 테스트 후 Result를 보기위해 Publish Unit Test Results step 추가
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
        with:
         files: build/test-results/**/*.xml

      - name: Get Docker next version
        run : |
          # 레포지토리와 이미지 설정
          REPOSITORY="sh80165/dev-contribhub"
          
          # Docker Hub에서 태그 목록을 가져오기
          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPOSITORY/tags?page_size=10" | jq -r '.results[].name' | sort -V | tail -n 1)
          
          # 최신 버전이 없다면 0.0.1로 시작
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="0.0.1"
            else
            # 버전 번호를 점(dot) 기준으로 나누기
            IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_TAG"
            
            # 마지막 숫자 증가시키기
            PATCH=${VERSION_PARTS[2]}
            PATCH=$((PATCH + 1))
            
            # 새로운 버전 생성
            NEW_TAG="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          fi

          echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_ENV" ## GITHUB_ENV 환경변수에 추가.
          
          echo "New tag to be created: $NEW_TAG"

      - name: Docker build
        run: |
          echo "NEW_TAG: $NEW_TAG"
          docker build --platform linux/amd64 -t "${{ env.DOCKER_IMAGE }}:$NEW_TAG" .

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push docker image to docker hub
        run: docker push "${{ env.DOCKER_IMAGE }}:$NEW_TAG"

  deploy:
    runs-on: ubuntu-latest
    needs: build # 빌드 작업 완료후에만 배포되도록 설정.

    steps:
        - name: Deploy Docker image
          run : |
            ehco "Deploying version : ${{ needs.build.outputs.NEW_TAG}}"
